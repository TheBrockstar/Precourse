Alright! Welcome back my little dudes (USED WITHOUT GENDER, THANK YOU)! It's time for another great lesson about Javascript. Today we're going to talk about some cool new concepts that are fundamental to building really complex and powerful programs in Javascript. You want to make a Transformer right? You've seen Transformers right? Then you definitely want to make one of those giant machines and, to do it, you will need everything that we have reviewed so far, and these next tools.

Alright, so our first new tool is something completely amazing. It is called an object, and it is everything in Javascript. That's right, even strings, variables, arrays, and functions are objects. Objects can be as tiny as a variable with a single number of it, to as powerful as Cybertron, the home planet of all Transformers! And you can make them. If that's feeling a little overwhelming, just think about it like this: Everything is an object, but they don't always use the full potential of an object which comes from a unique quality to them: properties. Properties are kind of like individual values in arrays except that instead of being ordered by their position in an array (0, 1, 2, 3...), they are ordered by a name that we call a key. The key is kind of like a variable too, in a way, in that you can put almost anything into it, including funcions, arrays, and even more objects (objectception). So, once we know the key and the value, we have a parameter. It's sort of like if all of the Transformers were objects, but some are Decepticons, and others are Autobots. We'd have an object that would be Transformer, and then that object would have a parameter which would have a key of something like autobotOrDecepticon. Then we would assign a value to that. A simpler example would be the name (like Optimus Prime, or Megatron)! Remember that everything, EVERYTHING, in javascript is an object and has/can be given properties.

Wow, so I guess we also covered properties in there, so I won't worry about re-hashing that idea. But a new and equally exciting idea is that of the METHOD. Methods are basically when you assign a function to a property! So the value in the key-value pair is a function. This allows you to organize and associate your functions with an object so that they can efficiently operate using the object's information. For example, take the autobot and decepticon idea again and think about what they'd do if they saw one another. They'd fight, right?? But if they saw one of their own kind, they probably wouldn't. So you could have a function assigned to the onsight property of the transformer object that would say something like if their autobotOrDecepticon property does NOT match my autobotOrDecepticon property, then attack!!! Pretty cool stuff.

Also along the topic of objects and properties is a new type of loop that we can use in Javascript. Well, to be honest, it's just a variance of the For loop that we've already learned, but it gives us a new way to use it. If you recall, one of the most common times when we would use a for loop in Javascript is to do something to every item in an array, in a certain order based on the position of the item in the array (ie. 1st position, 10th position, etc). But what if we wanted to do that with the properties in an object?! We can't in the same way because they aren't ordered in a way that is easy to access. So, this new loop, the for-in loop handles the ordering for us and lets us go through all the properties of every object and use them like we would in a standard for loop! Pretty darn cool.

The last bits that we will go through are the ways to access the individual parameters of an object. I'm a bit rushed, so I won't be able to give you the fun examples that I like to but I'll still try to explain it quickly and efficiently. There are two ways to do this and they are called dot notation and bracket notation. Dot notation has an advantage in that it is easy to write and read and for other reasons that I hope to discover as I use it more. Bracket notation allows us to call parameters using variables, which is pretty neat! Also, in bracket notation, the value in the brackets must be a string or a number or a variable referring to a string or a number.

That's all for now. Thank you!
