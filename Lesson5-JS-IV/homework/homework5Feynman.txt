Hey everyone! This is going to be our last javascript class. How crazy is it that we've gone from just defining variables to crazy things like arrays and functions and conditionals and loops! We're starting to become advanced beginners, and that is very exciting.

Today the topics that we're going to get into are a bit more advanced that the topics that we've covered so far. Because of that, we probably won't have a thorough understanding of any of them but, ideally, we'll know enough to be able to use them to make cool things like smart fish and giant robots!

Let's start off with a few new values that can be assigned to variables! Did you know that you don't have to set a value to a variable when you declare it? The declaration of the variable and the definition of the variable are separate ideas. But then what's inside of that variable? If the variable is a container that changes to fit what is inside of it, what does that variable look like? The answer is the undefined value. It just means that between the time of the creation of the variable to whenever you asked for the variable's value, that nothing was put inside of it. But, believe it or not, there is actually another way to have nothing inside of a variable and that is the NULL value. Essentially, NULL functions just like undefined, but if you see it you know that someone put NULL into the variable, that it was defined as empty on purpose! There's actually on more value that represents a kind of nothing, called NaN read Not a Number. It's actually a property of the Global object, which is pretty crazy! It's basically just a property that asks whether or not a value is a number or not.

Okay, due to time constraints, let move on to our next topic, TRUTHINESS! Truthiness, first of all, sounds like a ridiculous word. I mean, it almost sounds like Toothless from how to train your dragon. But it is actually a really cool idea. It's basically just whether or not a value is TRUE or FALSE. We know about booleans from our previous explorations, but did you know that every value in Javascript has a TRUE or FALSE value that can be used? Whether or not a value is TRUE or FALSE is its truthiness. For example if you put a string inside of a variable (defining that variable), and that string is just a single space, then the Truthiness of that value is TRUE! But, if the string is just two single quotation marks without anything inside of them, the value is FALSE! However, if you have an empty array in a variable, the value of that is TRUE, even though it is technically empty! Basically, empty strings, FALSE booleans, the number 0, and undefined, NULL and NaN, are what have a Truthiness of FALSE. Everything else is TRUE for the most part.

Alright, now time to move past the potatoes and onto the meat! Next we have a cool idea, which is the idea of an argument. Arguments are the values that we pass inside of a function when we call it. It's the stuff, separated by commas, that we put inside the parantheses. Those arguments are stored inside of something that is kind of like an array... it isn't an array, but we can kind of use it like an array. For example, we can get the number of arguments by using the .length method. We can also loop through each of them. So if a function is like a machine that makes autobots, the array is sort of like a list of materials or components or even ideas (for the brains) that are being put into the machine.

Our next topic is a very powerful topic that you can used to make some pretty complex ideas if you really dig into it, and that is the idea of a callback function! Callback functions are basically when you pass a function inside of another function, as an argument, and then call that function inside of the function that you passed it into. Sound complicated? Well, it definitely can be, because you can have a function with trees of callbacks, like a bottomless pit (we call this... callback hell). But just think of them like a function that you use inside of another function! It can use all the arguments passed into the original function and that makes it kind of like a subroutine. So you have a function for your transformer that is equipWeapon. But we want to have a function for the different kinds of weapons that our tranformers could use, so we also have a couple weapon functions called chooseSword, and choosePlasmaCannon. Then we can pass those weapon functions through to the equipWeapon function, and that allows us to choose which weapon we want to equip, and then equip them. Because the different weapons are probably equipped differently.

But what if we want to make a ton of transformers. What if, like the Allspark, we want to be able to create a ton of transformers? Well, for that, javascript has the Class object. Classes are, essentially, templates for creating other objects of the same type. So, for example, if we thought of the Allspark like a Class, it basically takes in some information and pumps out a transformer, but depending on the information that we put into it, can change the specific values of the properties and methods of whatever it took in. The result could be an autobot or a decepticon, depending on the values that were or were not passed on to the properties defined in the class. Another word for class, in Javascript, is contstructor. Which make sense because it constructs other objects.

The final idea that we're going to go over today is the idea of the prototype! Prototypes are a somewhat unusual property of the Object object. They are used by classes to add methods to every instance of an object created by the constructor. Back to the Transformers analogy... Let's say that the downside of the Allspark (our class/constructor) is that the Transformers that it creates don't have an allegiance to one side. We could use the prototype property to define a method that defines the transformers as Autobots, and every single object creaded by the class will inherit the method passed in! So, then, all of the transformers would be Autobots. Prototypes are a pretty unique part of javascript.

