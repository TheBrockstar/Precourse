Variables: Hello there! Today I'm going to tell you a little bit about variables in an attempt to help you and me understand them. Variables are like little containers that can hold things so that you can use them later. While there are many different shapes or types of variables, Javascript handles what kind they are for us most of the time, based on what we are trying to put in them. 

There are three ways for us to declare (or make) variables and, instead of making different shapes of variables, they just help Javascript understand how we want to use them. Think of Javascript like the servant to a great Pharaoh of egypt; declarations are like the pharaoh saying "so let it be written. so let it be done." And when "it" is done by the servant, you have a variable (for time's sake... I'm going to end that analogy here... sadly)!

1. var is the most basic way to declare a variable. It should be used most often unless you need to use one of the other two ways to declare a variable.

2. let is very similar to var in that it makes a variable. But it limits where the variable can be used. Where a variable can be used is called "scope" and, in the case of let, the variable can only be used on the block level scope, which basically means anything surrounded by these bad boys(or girls): {}.

3. const is the final way to declare a variable and it's used if you don't want the value of the variable to ever change. Now, const (or constant) variables can also have properties and stuff that can be changed (kind of like colors and patterns on the container), but the actual value won't be able to anymore after it has been declared.

Alright, so now that we understand variables (a little...), let's talk about talking about talking. Now that probably sounded ridiculous, but what we're talking about next is something called strings. Strings are bits of text that are easily read by people. Strings are like little messages passed on paper between friends. You couldn't understand what was on the message if someone just gave you a piece of paper, you'd need to open it up and read the message. That message is a string, and it can be stored in a variable (like a piece of paper...kind of).

Another cool type of thing that we can put into variables are booleans. Booleans are basically just 'yes' or 'no'; alternatively (and more accurately) you could (should) view them as TRUE or FALSE. They can only have one of those two values. TRUE or FALSE. It makes them easy to understand. The word boolean just comes from some guy's last name, which is why it doesn't really make intuitive sense.

Now, getting into the really FUN stuff. You can't spell functions without fun. Functions are ways to contain and execute instructions on how to use variables and values in useful ways. Basically, you put stuff into a function, throw some logic into into, and get a result back. The stuff that you put in are called arguments and they are generally stored in little variables called parameters. Then you can do stuff with them (like adding them together, or sorting them, or dividing them, or basically doing anything to them that you imagination and the laws of programming logic let you accomplish). Finally, functions generally return something that can be used outside of the functions. It's sort of like building a machine that makes a stuff out of other stuffs, or a machine that just does a stuff with other stuff, even if it doesn't make a new stuff out of them.

Our final topic today, OR IS IT, are conditional statements. Conditionals are statements that rely on conditions. They generally use the idea of booleans (TRUE or FALSE) to determine whether or not to do a thing. The most common conditional is the if statement, which does exactly what you might imagine. It's just a little thought process where the little Javascript brain that you are making is asking IF it should do a thing, based on a yes or no question. So, for example, if you were making an if statement for a stupid fish, you might have a statement that looks like: if food is in front of me then bite the food. Then any time that fish sees food, it's going to bite it! 

Unfortunately, this could pretty quickly end up with the fish on a hook (or fortunately for a fisherman)! But without it, how can the fish know what to eat? It would starve or just eat rocks and stuff and die that way. In that case, for a smarter fish, we have else statements. Else helps us to have other conditions after if statements, if the condition for the if statement, or the boolean, is false. Our smart fish could now think something like: if the thing that I am looking at is a hook, do not eat it, otherwise (or, else), if it is food, eat it! This is pretty bad logic still, on its own, but fish are pretty complex machines compared to anything you'll be writing. 

I hope that this has helped you understand a bit of Javascript basics. Have a great day!